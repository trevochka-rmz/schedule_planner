exports.getScheduleByTeacher = async (req, res) => {
    try {
        const { teacherId } = req.params;
        const schedule = await Schedule.findOne({ teacher: teacherId })
            .populate({
                path: 'lessons.lessonId',
                populate: [
                    {
                        path: 'teacher',
                        select: 'fullname email',
                        options: { lean: true },
                    },
                    {
                        path: 'student',
                        select: 'fullname email',
                        options: { lean: true },
                        strictPopulate: false,
                    },
                    {
                        path: 'group',
                        select: 'name day direction students',
                        options: { lean: true },
                        strictPopulate: false,
                        populate: {
                            path: 'students',
                            select: 'fullname direction _id', // Теперь у студентов будет fullname и email
                            options: { lean: true },
                        },
                    },
                ],
            })
            .lean();
        if (!schedule) {
            console.error(
                `Расписание не найдено для преподавателя с ID: ${teacherId}`
            );
            return res.status(404).json({ message: 'Расписание не найдено' });
        }

        // Форматируем данные
        const formattedLessons = schedule.lessons
            .map(({ lessonId, lessonType }) => {
                try {
                    let startDate;

                    // Определяем тип `lesson.date`
                    if (typeof lessonId.date === 'string') {
                        // Если `lesson.date` — это строка
                        if (lessonId.date.includes('T')) {
                            startDate = new Date(lessonId.date); // ISO-формат
                        } else {
                            // Если `lesson.date` — это дата без времени
                            startDate = new Date(
                                `${lessonId.date}T${lessonId.time}`
                            );
                        }
                    } else if (lessonId.date instanceof Date) {
                        // Если `lesson.date` — это объект Date
                        startDate = new Date(
                            `${lessonId.date.toISOString().split('T')[0]}T${
                                lessonId.time
                            }`
                        );
                    } else {
                        throw new Error(
                            `Некорректный формат даты: ${lessonId.date}`
                        );
                    }

                    // Проверяем корректность времени
                    if (isNaN(startDate.getTime())) {
                        throw new Error(
                            `Некорректное время: ${lessonId.date}T${lessonId.time}`
                        );
                    }
                    // Рассчитываем endDate
                    const endDate = new Date(
                        startDate.getTime() + (lessonId.duration || 0) * 60000
                    );
                    if (lessonType === 'Lesson') {
                        return {
                            id: lessonId._id,
                            title: `${lessonId.direction} (${
                                lessonId.student?.fullname || 'Без имени'
                            })`,
                            start: startDate.toISOString(),
                            end: endDate.toISOString(),
                            status: lessonId.status,
                            extendedProps: {
                                studentID:
                                    lessonId.student?._id ||
                                    'Неизвестный ID студент',
                                teacherID:
                                    lessonId.teacher?._id ||
                                    'Неизвестный ID преподаватель',
                                student:
                                    lessonId.student?.fullname ||
                                    'Неизвестный студент',
                                teacher:
                                    lessonId.teacher?.fullname ||
                                    'Неизвестный преподаватель',
                                direction: lessonId.direction || 'Не указано',
                                theme: lessonId.theme || '',
                                comment: lessonId.comment || 'Не указано',
                                commentAfter: lessonId.commentAfter || '',
                            },
                        };
                    } else if (lessonType === 'GroupLesson') {
                        return {
                            id: lessonId._id,
                            title: lessonId.group?.name || 'Без имени',
                            start: startDate.toISOString(),
                            end: endDate.toISOString(),
                            status: lessonId.status,
                            extendedProps: {
                                studentIDs:
                                    lessonId.group.students?.map(
                                        (student) => student._id
                                    ) || [],
                                teacherID:
                                    lessonId.teacher?._id ||
                                    'Неизвестный ID преподаватель',
                                students: lessonId.group.students?.map(
                                    (student) => student.fullname
                                ) || ['Неизвестные студенты'],
                                teacher:
                                    lessonId.teacher?.fullname ||
                                    'Неизвестный преподаватель',
                                direction:
                                    lessonId.group.direction || 'Не указано',
                                theme: lessonId.theme || '',
                                comment: lessonId.comment || 'Не указано',
                                commentAfter: lessonId.commentAfter || '',
                            },
                        };
                    }
                } catch (error) {
                    console.error(
                        `Ошибка форматирования урока с ID: ${lessonId._id}`,
                        error.message
                    );
                    return null; // Пропускаем ошибочные уроки
                }
            })
            .filter(Boolean); // Убираем null-значения

        res.status(200).json({ lessons: formattedLessons });
    } catch (error) {
        console.error('Ошибка сервера при получении расписания:', error);
        res.status(500).json({
            message: 'Ошибка сервера',
            error: error.message,
        });
    }
};

exports.getScheduleByStudent = async (req, res) => {
    try {
        const { studentId } = req.params;

        // Проверяем, существует ли расписание
        const scheduleStudent = await ScheduleStudent.findOne({
            student: studentId,
        }).populate({
            path: 'lessons.lessonId',
            populate: [
                {
                    path: 'teacher',
                    select: 'fullname email',
                    options: { lean: true },
                },
                {
                    path: 'student',
                    select: 'fullname email',
                    options: { lean: true },
                    strictPopulate: false,
                },
                {
                    path: 'group',
                    select: 'name day direction students',
                    options: { lean: true },
                    strictPopulate: false,
                    populate: {
                        path: 'students',
                        select: 'fullname _id',
                        options: { lean: true },
                    },
                },
            ],
        });
        if (!scheduleStudent) {
            console.error(
                `Расписание не найдено для студента с ID: ${studentId}`
            );
            return res.status(404).json({ message: 'Расписание не найдено' });
        }

        // Форматируем данные
        const formattedLessons = scheduleStudent.lessons
            .map(({ lessonId, lessonType }) => {
                try {
                    let startDate;

                    // Определяем тип `lesson.date`
                    if (typeof lessonId.date === 'string') {
                        // Если `lesson.date` — это строка
                        if (lessonId.date.includes('T')) {
                            startDate = new Date(lessonId.date); // ISO-формат
                        } else {
                            // Если `lesson.date` — это дата без времени
                            startDate = new Date(
                                `${lessonId.date}T${lessonId.time}`
                            );
                        }
                    } else if (lessonId.date instanceof Date) {
                        // Если `lesson.date` — это объект Date
                        startDate = new Date(
                            `${lessonId.date.toISOString().split('T')[0]}T${
                                lessonId.time
                            }`
                        );
                    } else {
                        throw new Error(
                            `Некорректный формат даты: ${lessonId.date}`
                        );
                    }

                    // Проверяем корректность времени
                    if (isNaN(startDate.getTime())) {
                        throw new Error(
                            `Некорректное время: ${lessonId.date}T${lessonId.time}`
                        );
                    }
                    // Рассчитываем endDate
                    const endDate = new Date(
                        startDate.getTime() + (lessonId.duration || 0) * 60000
                    );

                    if (lessonType === 'Lesson') {
                        return {
                            id: lessonId._id,
                            title: `${lessonId.direction} (${
                                lessonId.student?.fullname || 'Без имени'
                            })`,
                            start: startDate.toISOString(),
                            end: endDate.toISOString(),
                            status: lessonId.status,
                            extendedProps: {
                                studentID:
                                    lessonId.student?._id ||
                                    'Неизвестный ID студент',
                                teacherID:
                                    lessonId.teacher?._id ||
                                    'Неизвестный ID преподаватель',
                                student:
                                    lessonId.student?.fullname ||
                                    'Неизвестный студент',
                                teacher:
                                    lessonId.teacher?.fullname ||
                                    'Неизвестный преподаватель',
                                direction: lessonId.direction || 'Не указано',
                                theme: lessonId.theme || '',
                                comment: lessonId.comment || 'Не указано',
                                commentAfter: lessonId.commentAfter || '',
                            },
                        };
                    } else if (lessonType === 'GroupLesson') {
                        return {
                            id: lessonId._id,
                            title: `${lessonId.direction} (${
                                lessonId.student?.fullname || 'Без имени'
                            })`,
                            start: startDate.toISOString(),
                            end: endDate.toISOString(),
                            status: lessonId.status,
                            extendedProps: {
                                studentID:
                                    lessonId.student?._id ||
                                    'Неизвестный ID студент',
                                teacherID:
                                    lessonId.teacher?._id ||
                                    'Неизвестный ID преподаватель',
                                student:
                                    lessonId.student?.fullname ||
                                    'Неизвестный студент',
                                teacher:
                                    lessonId.teacher?.fullname ||
                                    'Неизвестный преподаватель',
                                direction: lessonId.direction || 'Не указано',
                                theme: lessonId.theme || '',
                                comment: lessonId.comment || 'Не указано',
                                commentAfter: lessonId.commentAfter || '',
                            },
                        };
                    }
                } catch (error) {
                    console.error(
                        `Ошибка форматирования урока с ID: ${lessonId._id}`,
                        error.message
                    );
                    return null; // Пропускаем ошибочные уроки
                }
            })
            .filter(Boolean); // Убираем null-значения

        res.status(200).json({ lessons: formattedLessons });
    } catch (error) {
        console.error('Ошибка сервера при получении расписания:', error);
        res.status(500).json({
            message: 'Ошибка сервера',
            error: error.message,
        });
    }
};

